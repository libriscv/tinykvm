#include "usercode.hpp"
#include <cstring>

namespace tinykvm {

static const unsigned char usercode[] = {
    0x10, 0x50, 0x20, 0x50, 0x2c, 0x50, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x49, 0x89, 0xcd, 0xb8, 0x77, 0xf7, 0x01, 0x00,
    0x0f, 0x05, 0x4c, 0x89, 0xe9, 0x41, 0xff, 0xe7, 0x48, 0x89, 0xc7, 0x66,
    0xb8, 0xff, 0xff, 0x66, 0xe7, 0x00, 0xeb, 0xf7, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00
};

const user_asm_header& usercode_header() {
	return *(const user_asm_header*) &usercode[0];
}

void setup_vm64_usercode(void* usercode_area)
{
	std::memcpy(usercode_area, usercode, sizeof(usercode));
}

}
